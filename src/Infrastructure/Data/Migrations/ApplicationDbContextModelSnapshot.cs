// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProductMatrix.Infrastructure.Data;

#nullable disable

namespace ProductMatrix.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProductMatrix.Domain.BuilderType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("BuilderTypes");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.ApplicationObjectiveClassification", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("ApplicationObjectiveClassification_CouncilZoningTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("AwayBankType_GeneralLookUpID")
                        .HasColumnType("int");

                    b.Property<int?>("ConsolidateForm")
                        .HasColumnType("int")
                        .HasComment("How many loans have for consolidation.");

                    b.Property<int?>("ConsolidateTo")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EquityType_GeneralLookUpID")
                        .HasColumnType("int");

                    b.Property<int?>("HeedFulPoints")
                        .HasColumnType("int");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UsageType_GeneralLookUpID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ApplicationObjectiveClassification_CouncilZoningTypeID");

                    b.HasIndex("AwayBankType_GeneralLookUpID");

                    b.HasIndex("EquityType_GeneralLookUpID");

                    b.HasIndex("UsageType_GeneralLookUpID");

                    b.ToTable("ApplicationObjectiveClassifications");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.BusinessFinanceType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("BusinessFinanceTypes");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.Calculator.AdditionalFee", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("AdditionalFee_DocTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("AdditionalFee_LandSizeID")
                        .HasColumnType("int");

                    b.Property<int?>("AdditionalFee_LoanToValueRatioID")
                        .HasColumnType("int");

                    b.Property<int?>("AdditionalFee_VacantLandCategoryID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("IncrementFee")
                        .HasColumnType("float");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("AdditionalFee_DocTypeID");

                    b.HasIndex("AdditionalFee_LandSizeID");

                    b.HasIndex("AdditionalFee_LoanToValueRatioID");

                    b.HasIndex("AdditionalFee_VacantLandCategoryID");

                    b.ToTable("AdditionalFees");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.Calculator.AdditionalFeeDocTypeVariation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("AdditionalFeeDocTypeVariation_DocTypeID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormulaType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("AdditionalFeeDocTypeVariation_DocTypeID");

                    b.ToTable("AdditionalFeeDocTypeVariations");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.Calculator.DefaultFee", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<double?>("AnnualFee")
                        .HasColumnType("float");

                    b.Property<double?>("ApplicationFee")
                        .HasColumnType("float");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("DeedOfPriorityFee")
                        .HasColumnType("float");

                    b.Property<int?>("DefaultFee_DocTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("DefaultFee_LoanToValueRatioID")
                        .HasColumnType("int");

                    b.Property<int?>("DefaultFee_ProductID")
                        .HasColumnType("int");

                    b.Property<double?>("DischargeFee")
                        .HasColumnType("float");

                    b.Property<double?>("EstablishmentFee")
                        .HasColumnType("float");

                    b.Property<double?>("ExpressFee")
                        .HasColumnType("float");

                    b.Property<string>("FormulaType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("RateLoadingFee")
                        .HasColumnType("float");

                    b.Property<double?>("RiskFee")
                        .HasColumnType("float");

                    b.Property<double?>("SettlementFee")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("DefaultFee_DocTypeID");

                    b.HasIndex("DefaultFee_LoanToValueRatioID");

                    b.HasIndex("DefaultFee_ProductID");

                    b.ToTable("DefaultFees");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.Calculator.DefaultSetting", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Property")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("DefaultSettings");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.Calculator.LandSize", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("From")
                        .HasColumnType("float");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("To")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.ToTable("LandSizes");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.Calculator.ProductFeeLVRRate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("LVRFrom")
                        .HasColumnType("float")
                        .HasComment("LVR means loan value ratio");

                    b.Property<double>("LVRTo")
                        .HasColumnType("float");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductFeeLVRRate_DocTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("ProductFeeLVRRate_ProductID")
                        .HasColumnType("int");

                    b.Property<double>("RatePercentIncrementDecrement")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("ProductFeeLVRRate_DocTypeID");

                    b.HasIndex("ProductFeeLVRRate_ProductID");

                    b.ToTable("ProductFeeLVRRates");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.Calculator.ScenarioBuilder", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CategoryType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CouncilZoning")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormulaType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("ISHighDensity")
                        .HasColumnType("bit");

                    b.Property<bool>("ISNaturalPerson")
                        .HasColumnType("bit");

                    b.Property<bool>("ISOwnerOccupied")
                        .HasColumnType("bit");

                    b.Property<bool>("ISSelectedMetro")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PCCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ScenarioBuilder_CouncilZoningCategoryID")
                        .HasColumnType("int");

                    b.Property<int?>("ScenarioBuilder_RelocationServicingID")
                        .HasColumnType("int");

                    b.Property<int?>("ScenarioBuilder_VacantLandCategoryID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ScenarioBuilder_CouncilZoningCategoryID");

                    b.HasIndex("ScenarioBuilder_RelocationServicingID");

                    b.HasIndex("ScenarioBuilder_VacantLandCategoryID");

                    b.ToTable("ScenarioBuilders");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.CashOutType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("CashOutTypes");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.CategoryType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("CategoryTypes");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.ConstructionType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("ConstructionTypes");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.EmploymentClassification", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmploymentClassification_CouncilZoningCategoryID")
                        .HasColumnType("int");

                    b.Property<string>("EmploymentStatusType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("ISSameLineOfWork")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaximumExperienceOfWorkInMonths")
                        .HasColumnType("int");

                    b.Property<int>("MinimumExperienceOfWorkInMonths")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("EmploymentClassification_CouncilZoningCategoryID");

                    b.ToTable("EmploymentClassifications");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.GeneralLookUp", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("ISArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("ISDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("GeneralLookUps");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.LandSizeClassification", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("From")
                        .HasColumnType("float");

                    b.Property<int?>("HeedFulPoints")
                        .HasColumnType("int");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LandSizeClassification_CouncilZoningTypeID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("To")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("LandSizeClassification_CouncilZoningTypeID");

                    b.ToTable("LandSizeClassifications");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.OtherIncomeType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("OtherIncomeTypes");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.Postcodes.BorrowingEntityType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("BorrowingEntityTypes");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.Postcodes.Postcode", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("ISIsLand")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Postcode_StateID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("Postcode_StateID");

                    b.ToTable("Postcodes");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.Postcodes.PostcodeClassification", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("PostcodeClassifications");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.Postcodes.PostcodeClassificationMapper", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PostcodeClassificationMapper_PostcodeClassificationID")
                        .HasColumnType("int");

                    b.Property<int?>("PostcodeClassificationMapper_PostcodeID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PostcodeClassificationMapper_PostcodeClassificationID");

                    b.HasIndex("PostcodeClassificationMapper_PostcodeID");

                    b.ToTable("PostcodeClassificationMapper");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.Postcodes.PostcodeSpecificationMapper", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PostcodeClassification_HighSecurityID")
                        .HasColumnType("int");

                    b.Property<int?>("PostcodeClassification_PCCategoryID")
                        .HasColumnType("int");

                    b.Property<int?>("PostcodeClassification_SAndPID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PostcodeClassification_HighSecurityID");

                    b.HasIndex("PostcodeClassification_PCCategoryID");

                    b.HasIndex("PostcodeClassification_SAndPID");

                    b.ToTable("PostcodeSpecificationMapper");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.Postcodes.PostcodeSuburbMapper", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("ISIsLand")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostcodeSuburbMapper_PostcodeID")
                        .HasColumnType("int");

                    b.Property<int?>("PostcodeSuburbMapper_SuburbID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PostcodeSuburbMapper_PostcodeID");

                    b.HasIndex("PostcodeSuburbMapper_SuburbID");

                    b.ToTable("PostcodeSuburbMapper");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.Postcodes.State", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("AbbreivatedName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Vic");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("ISTerritory")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Victoria");

                    b.HasKey("ID");

                    b.ToTable("States");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.Postcodes.Suburb", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SuburbStateID")
                        .HasColumnType("int");

                    b.Property<int?>("Suburb_SuburbStateID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("SuburbStateID");

                    b.ToTable("Suburbs");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.ProductSelectors.AgeCreditReportProductSelector", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("AgeCreditReportProductSelector_ProductID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FromDays")
                        .HasColumnType("int");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ToDays")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AgeCreditReportProductSelector_ProductID");

                    b.ToTable("AgeCreditReportProductSelectors");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.ProductSelectors.ApplicationObjectiveProductSelector", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("ApplicationObjectiveProductSelector_ApplicationObjectiveClassificationID")
                        .HasColumnType("int");

                    b.Property<int?>("ApplicationObjectiveProductSelector_ProductID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ApplicationObjectiveProductSelector_ApplicationObjectiveClassificationID");

                    b.HasIndex("ApplicationObjectiveProductSelector_ProductID");

                    b.ToTable("ApplicationObjectiveProductSelectors");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.ProductSelectors.BorrowingEntityProductSelector", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("BorrowingEntityProductSelector_BorrowingEntityTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("BorrowingEntityProductSelector_CouncilZoningTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("BorrowingEntityProductSelector_ProductID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HeedfulPoints")
                        .HasColumnType("int");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("BorrowingEntityProductSelector_BorrowingEntityTypeID");

                    b.HasIndex("BorrowingEntityProductSelector_CouncilZoningTypeID");

                    b.HasIndex("BorrowingEntityProductSelector_ProductID");

                    b.ToTable("BorrowingEntityProductSelectors");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.ProductSelectors.ButtonTypeProductSelector", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("ButtonTypeProductSelector_CouncilZoningTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("ButtonTypeProductSelector_GeneralLookUpID")
                        .HasColumnType("int");

                    b.Property<int?>("ButtonTypeProductSelector_ProductID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ButtonTypeProductSelector_CouncilZoningTypeID");

                    b.HasIndex("ButtonTypeProductSelector_GeneralLookUpID");

                    b.HasIndex("ButtonTypeProductSelector_ProductID");

                    b.ToTable("ButtonTypeProductSelectors");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.ProductSelectors.CashOutProductSelector", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("CashOutProductSelector_BusinessFinanceTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("CashOutProductSelector_CashOutTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("CashOutProductSelector_ProductID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CashOutProductSelector_BusinessFinanceTypeID");

                    b.HasIndex("CashOutProductSelector_CashOutTypeID");

                    b.HasIndex("CashOutProductSelector_ProductID");

                    b.ToTable("CashOutProductSelectors");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.ProductSelectors.ConstructionProductSelector", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("ConstructionProductSelector_BuilderTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("ConstructionProductSelector_ConstructionTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("ConstructionProductSelector_CouncilZoningTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("ConstructionProductSelector_ProductID")
                        .HasColumnType("int");

                    b.Property<int?>("ConstructionProductSelector_RenovationTypeID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("ISGreenRated")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ConstructionProductSelector_BuilderTypeID");

                    b.HasIndex("ConstructionProductSelector_ConstructionTypeID");

                    b.HasIndex("ConstructionProductSelector_CouncilZoningTypeID");

                    b.HasIndex("ConstructionProductSelector_ProductID");

                    b.HasIndex("ConstructionProductSelector_RenovationTypeID");

                    b.ToTable("ConstructionProductSelectors");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.ProductSelectors.DocTypeProductSelector", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DocTypeProductSelector_CouncilZoningTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("DocTypeProductSelector_DocTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("DocTypeProductSelector_ProductID")
                        .HasColumnType("int");

                    b.Property<int?>("HeedfulPoints")
                        .HasColumnType("int");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaximumLoanTermInYears")
                        .HasColumnType("int");

                    b.Property<int>("MinimumLoanTermInYears")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DocTypeProductSelector_CouncilZoningTypeID");

                    b.HasIndex("DocTypeProductSelector_DocTypeID");

                    b.HasIndex("DocTypeProductSelector_ProductID");

                    b.ToTable("DocTypeProductSelectors");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.ProductSelectors.DwellingsProductSelector", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DwellingCount")
                        .HasColumnType("int");

                    b.Property<int?>("DwellingsProductSelector_CouncilZoningCategoryTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("DwellingsProductSelector_ProductID")
                        .HasColumnType("int");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PCCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("DwellingsProductSelector_CouncilZoningCategoryTypeID");

                    b.HasIndex("DwellingsProductSelector_ProductID");

                    b.ToTable("DwellingsProductSelectors");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.ProductSelectors.EmployerClassificationProductSelector", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployerClassificationProductSelector_ProductID")
                        .HasColumnType("int");

                    b.Property<string>("EmployerClassificationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("EmployerClassificationProductSelector_ProductID");

                    b.ToTable("EmployerClassificationProductSelectors");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.ProductSelectors.EmploymentClassificationProductSelector", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmploymentClassificationProductSelector_EmploymentClassificationID")
                        .HasColumnType("int");

                    b.Property<int?>("EmploymentClassificationProductSelector_ProductID")
                        .HasColumnType("int");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("EmploymentClassificationProductSelector_EmploymentClassificationID");

                    b.HasIndex("EmploymentClassificationProductSelector_ProductID");

                    b.ToTable("EmploymentClassificationProductSelectors");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.ProductSelectors.FacilityTypeProductSelector", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FacilityTypeProductSelector_CouncilZoningTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("FacilityTypeProductSelector_GeneralLookUpID")
                        .HasColumnType("int");

                    b.Property<int?>("FacilityTypeProductSelector_ProductID")
                        .HasColumnType("int");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("FacilityTypeProductSelector_CouncilZoningTypeID");

                    b.HasIndex("FacilityTypeProductSelector_GeneralLookUpID");

                    b.HasIndex("FacilityTypeProductSelector_ProductID");

                    b.ToTable("FacilityTypeProductSelectors");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.ProductSelectors.GuidedByTypeProductSelector", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GuidedByTypeProductSelector_CouncilZoningTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("GuidedByTypeProductSelector_GeneralLookUpID")
                        .HasColumnType("int");

                    b.Property<int?>("GuidedByTypeProductSelector_ProductID")
                        .HasColumnType("int");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("GuidedByTypeProductSelector_CouncilZoningTypeID");

                    b.HasIndex("GuidedByTypeProductSelector_GeneralLookUpID");

                    b.HasIndex("GuidedByTypeProductSelector_ProductID");

                    b.ToTable("GuidedByTypeProductSelectors");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.ProductSelectors.HeedFullPointTypeProductSelector", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HeedFullPointTypeProductSelector_CouncilZoningTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("HeedFullPointTypeProductSelector_GeneralLookUpID")
                        .HasColumnType("int");

                    b.Property<int?>("HeedFullPointTypeProductSelector_ProductID")
                        .HasColumnType("int");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("HeedFullPointTypeProductSelector_CouncilZoningTypeID");

                    b.HasIndex("HeedFullPointTypeProductSelector_GeneralLookUpID");

                    b.HasIndex("HeedFullPointTypeProductSelector_ProductID");

                    b.ToTable("HeedFullPointTypeProductSelectors");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.ProductSelectors.LandSizeProductSelector", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LandSizeProductSelector_LandSizeClassificationID")
                        .HasColumnType("int");

                    b.Property<int?>("LandSizeProductSelector_ProductID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("LandSizeProductSelector_LandSizeClassificationID");

                    b.HasIndex("LandSizeProductSelector_ProductID");

                    b.ToTable("LandSizeProductSelectors");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.ProductSelectors.LoanAmountProductSelector", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LoanAmountProductSelector_CouncilZoningTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("LoanAmountProductSelector_DocTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("LoanAmountProductSelector_ProductID")
                        .HasColumnType("int");

                    b.Property<string>("LoanType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("LoanAmountProductSelector_CouncilZoningTypeID");

                    b.HasIndex("LoanAmountProductSelector_DocTypeID");

                    b.HasIndex("LoanAmountProductSelector_ProductID");

                    b.ToTable("LoanAmountProductSelectors");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.ProductSelectors.LvrProductSelector", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LvrProductSelector_ProductID")
                        .HasColumnType("int");

                    b.Property<double>("MaximumLVR")
                        .HasColumnType("float");

                    b.Property<string>("ResidencyType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("LvrProductSelector_ProductID");

                    b.ToTable("LvrProductSelectors");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.ProductSelectors.MaritalStatusProductSelector", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MaritalStatusProductSelector_CouncilZoningCategoryTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("MaritalStatusProductSelector_ProductID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("MaritalStatusProductSelector_CouncilZoningCategoryTypeID");

                    b.HasIndex("MaritalStatusProductSelector_ProductID");

                    b.ToTable("MaritalStatusProductSelectors");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.ProductSelectors.NaturalPersonAgeProductSelector", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HeedfulPoints")
                        .HasColumnType("int");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaximumAge")
                        .HasColumnType("int");

                    b.Property<int>("MinimumAge")
                        .HasColumnType("int");

                    b.Property<int?>("NaturalPersonAgeProductSelector_CouncilZoningTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("NaturalPersonAgeProductSelector_ProductID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("NaturalPersonAgeProductSelector_CouncilZoningTypeID");

                    b.HasIndex("NaturalPersonAgeProductSelector_ProductID");

                    b.ToTable("NaturalPersonAgeProductSelectors");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.ProductSelectors.OtherIncomeTypeProductSelector", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OtherIncomeTypeProductSelector_CouncilZoningCategoryTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("OtherIncomeTypeProductSelector_OtherIncomeTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("OtherIncomeTypeProductSelector_ProductID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("OtherIncomeTypeProductSelector_CouncilZoningCategoryTypeID");

                    b.HasIndex("OtherIncomeTypeProductSelector_OtherIncomeTypeID");

                    b.HasIndex("OtherIncomeTypeProductSelector_ProductID");

                    b.ToTable("OtherIncomeTypeProductSelectors");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.ProductSelectors.PostcodeProductSelector", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PostcodeProductSelector_PostcodeSpecificationMapperID")
                        .HasColumnType("int");

                    b.Property<int?>("PostcodeProductSelector_ProductID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PostcodeProductSelector_PostcodeSpecificationMapperID");

                    b.HasIndex("PostcodeProductSelector_ProductID");

                    b.ToTable("PostcodeProductSelectors");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.ProductSelectors.PotentialImpactfulConsiderationProductSelector", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PotentialImpactfulConsiderationProductSelector_ProductID")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("PotentialImpactfulConsiderationProductSelector_ProductID");

                    b.ToTable("PotentialImpactfulConsiderationProductSelectors");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.ProductSelectors.PurchaseTypeProductSelector", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MaximumLVR")
                        .HasColumnType("float");

                    b.Property<double>("MinimumLVR")
                        .HasColumnType("float");

                    b.Property<string>("OccupancyType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PurchaseTypeProductSelector_CouncilZoningTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("PurchaseTypeProductSelector_DocTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("PurchaseTypeProductSelector_ProductID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PurchaseTypeProductSelector_CouncilZoningTypeID");

                    b.HasIndex("PurchaseTypeProductSelector_DocTypeID");

                    b.HasIndex("PurchaseTypeProductSelector_ProductID");

                    b.ToTable("PurchaseTypeProductSelectors");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.ProductSelectors.RepaymentTypeProductSelector", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HeedfulPoints")
                        .HasColumnType("int");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RateType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RepaymentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RepaymentTypeProductSelector_CouncilZoningTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("RepaymentTypeProductSelector_ProductID")
                        .HasColumnType("int");

                    b.Property<int>("TimeInYears")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RepaymentTypeProductSelector_CouncilZoningTypeID");

                    b.HasIndex("RepaymentTypeProductSelector_ProductID");

                    b.ToTable("RepaymentTypeProductSelectors");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.ProductSelectors.SecurityTypeProductSelector", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SecurityTypeProductSelector_CouncilZoningTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("SecurityTypeProductSelector_GeneralLookUpID")
                        .HasColumnType("int");

                    b.Property<int?>("SecurityTypeProductSelector_ProductID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("SecurityTypeProductSelector_CouncilZoningTypeID");

                    b.HasIndex("SecurityTypeProductSelector_GeneralLookUpID");

                    b.HasIndex("SecurityTypeProductSelector_ProductID");

                    b.ToTable("SecurityTypeProductSelectors");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.ProductSelectors.SelfEmployedClassificationProductSelector", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SelfEmployedClassificationProductSelector_ProductID")
                        .HasColumnType("int");

                    b.Property<int?>("SelfEmployedClassificationProductSelector_SelfEmployedClassificationID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("SelfEmployedClassificationProductSelector_ProductID");

                    b.HasIndex("SelfEmployedClassificationProductSelector_SelfEmployedClassificationID");

                    b.ToTable("SelfEmployedClassificationProductSelectors");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.ProductSelectors.ServiceTypeProductSelector", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ServiceTypeProductSelector_CouncilZoningTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceTypeProductSelector_GeneralLookUpID")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceTypeProductSelector_ProductID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ServiceTypeProductSelector_CouncilZoningTypeID");

                    b.HasIndex("ServiceTypeProductSelector_GeneralLookUpID");

                    b.HasIndex("ServiceTypeProductSelector_ProductID");

                    b.ToTable("ServiceTypeProductSelectors");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.ProductSelectors.TitleTypeProductSelector", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TitleTypeProductSelector_CouncilZoningTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("TitleTypeProductSelector_GeneralLookUpID")
                        .HasColumnType("int");

                    b.Property<int?>("TitleTypeProductSelector_ProductID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("TitleTypeProductSelector_CouncilZoningTypeID");

                    b.HasIndex("TitleTypeProductSelector_GeneralLookUpID");

                    b.HasIndex("TitleTypeProductSelector_ProductID");

                    b.ToTable("TitleTypeProductSelectors");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.ProductSelectors.UnitsApartmentProductSelector", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("LivingAreaFrom")
                        .HasColumnType("float");

                    b.Property<double>("LivingAreaTo")
                        .HasColumnType("float");

                    b.Property<int?>("UnitsApartmentProductSelector_ProductID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UnitsApartmentProductSelector_ProductID");

                    b.ToTable("UnitsApartmentProductSelectors");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.ProductSelectors.UsageTypeProductSelector", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UsageTypeProductSelector_CouncilZoningTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("UsageTypeProductSelector_GeneralLookUpID")
                        .HasColumnType("int");

                    b.Property<int?>("UsageTypeProductSelector_ProductID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UsageTypeProductSelector_CouncilZoningTypeID");

                    b.HasIndex("UsageTypeProductSelector_GeneralLookUpID");

                    b.HasIndex("UsageTypeProductSelector_ProductID");

                    b.ToTable("UsageTypeProductSelectors");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.ProductSelectors.ZoningTypeProductSelector", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ZoningTypeProductSelector_CouncilZoningCategoryID")
                        .HasColumnType("int");

                    b.Property<int?>("ZoningTypeProductSelector_CouncilZoningTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("ZoningTypeProductSelector_ProductID")
                        .HasColumnType("int");

                    b.Property<int?>("ZoningTypeProductSelector_StateID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ZoningTypeProductSelector_CouncilZoningCategoryID");

                    b.HasIndex("ZoningTypeProductSelector_CouncilZoningTypeID");

                    b.HasIndex("ZoningTypeProductSelector_ProductID");

                    b.HasIndex("ZoningTypeProductSelector_StateID");

                    b.ToTable("ZoningTypeProductSelectors");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.Products.CouncilZoningCategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("CouncilZoningCategories");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.Products.DocType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("DocTypes");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.Products.LoanToValueRatio", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("From")
                        .HasColumnType("float");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("To")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.ToTable("LoanToValueRatios");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.Products.NumeralClassification", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("LoanAmountFrom")
                        .HasColumnType("float");

                    b.Property<double>("LoanAmountTo")
                        .HasColumnType("float");

                    b.Property<string>("NumeralType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("NumeralClassifications");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.Products.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Product_ProductCategoryID")
                        .HasColumnType("int");

                    b.Property<double>("RangeFrom")
                        .HasColumnType("float");

                    b.Property<double>("RangeTo")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("Product_ProductCategoryID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.Products.ProductCatalogue", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("ISLiberalI")
                        .HasColumnType("bit");

                    b.Property<bool>("ISLiberalII")
                        .HasColumnType("bit");

                    b.Property<bool>("ISLiberalIII")
                        .HasColumnType("bit");

                    b.Property<bool>("ISLiberalIV")
                        .HasColumnType("bit");

                    b.Property<bool>("ISLiberalV")
                        .HasColumnType("bit");

                    b.Property<bool>("ISOptimaxI")
                        .HasColumnType("bit");

                    b.Property<bool>("ISOptimaxII")
                        .HasColumnType("bit");

                    b.Property<bool>("ISOptimaxIII")
                        .HasColumnType("bit");

                    b.Property<bool>("ISOptimaxIV")
                        .HasColumnType("bit");

                    b.Property<bool>("ISOptimaxV")
                        .HasColumnType("bit");

                    b.Property<bool>("ISPremiumI")
                        .HasColumnType("bit");

                    b.Property<bool>("ISPremiumII")
                        .HasColumnType("bit");

                    b.Property<bool>("ISPremiumIII")
                        .HasColumnType("bit");

                    b.Property<bool>("ISPremiumIV")
                        .HasColumnType("bit");

                    b.Property<bool>("ISPremiumV")
                        .HasColumnType("bit");

                    b.Property<bool>("ISProgressiveI")
                        .HasColumnType("bit");

                    b.Property<bool>("ISProgressiveII")
                        .HasColumnType("bit");

                    b.Property<bool>("ISProgressiveIII")
                        .HasColumnType("bit");

                    b.Property<bool>("ISProgressiveIV")
                        .HasColumnType("bit");

                    b.Property<bool>("ISProgressiveV")
                        .HasColumnType("bit");

                    b.Property<bool>("ISReceptiveI")
                        .HasColumnType("bit");

                    b.Property<bool>("ISReceptiveII")
                        .HasColumnType("bit");

                    b.Property<bool>("ISReceptiveIII")
                        .HasColumnType("bit");

                    b.Property<bool>("ISReceptiveIV")
                        .HasColumnType("bit");

                    b.Property<bool>("ISReceptiveV")
                        .HasColumnType("bit");

                    b.Property<bool>("ISSuperPrimeI")
                        .HasColumnType("bit");

                    b.Property<bool>("ISSuperPrimeII")
                        .HasColumnType("bit");

                    b.Property<bool>("ISSuperPrimeIII")
                        .HasColumnType("bit");

                    b.Property<bool>("ISSuperPrimeIV")
                        .HasColumnType("bit");

                    b.Property<bool>("ISSuperPrimeV")
                        .HasColumnType("bit");

                    b.Property<bool>("ISTolerantI")
                        .HasColumnType("bit");

                    b.Property<bool>("ISTolerantII")
                        .HasColumnType("bit");

                    b.Property<bool>("ISTolerantIII")
                        .HasColumnType("bit");

                    b.Property<bool>("ISTolerantIV")
                        .HasColumnType("bit");

                    b.Property<bool>("ISTolerantV")
                        .HasColumnType("bit");

                    b.Property<bool>("ISUltraPrimeI")
                        .HasColumnType("bit");

                    b.Property<bool>("ISUltraPrimeII")
                        .HasColumnType("bit");

                    b.Property<bool>("ISUltraPrimeIII")
                        .HasColumnType("bit");

                    b.Property<bool>("ISUltraPrimeIV")
                        .HasColumnType("bit");

                    b.Property<bool>("ISUltraPrimeV")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RuleDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("ProductCatalogues");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.Products.ProductCategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.Products.RelocationServicing", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("RelocationServicings");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.Products.VacantLandCategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("VacantLandCategories");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.RenovationType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("RenovationTypes");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.RulesFilter", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FilterType_GeneralLookUpID")
                        .HasColumnType("int");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentRuleFilterID")
                        .HasColumnType("int");

                    b.Property<int?>("RulesFilter_CouncilZoningTypeID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("FilterType_GeneralLookUpID");

                    b.HasIndex("RulesFilter_CouncilZoningTypeID");

                    b.ToTable("RulesFilters");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.SelfEmployedClassification", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ISDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaximumTimeInMonths")
                        .HasColumnType("int");

                    b.Property<int>("MinimumTimeInMonths")
                        .HasColumnType("int");

                    b.Property<int?>("SelfEmployedClassification_DocTypeID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("SelfEmployedClassifications");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.ApplicationObjectiveClassification", b =>
                {
                    b.HasOne("ProductMatrix.Domain.Entities.Products.CouncilZoningCategory", "ApplicationObjectiveClassification_CouncilZoningType")
                        .WithMany()
                        .HasForeignKey("ApplicationObjectiveClassification_CouncilZoningTypeID");

                    b.HasOne("ProductMatrix.Domain.Entities.GeneralLookUp", "AwayBankType_GeneralLookUp")
                        .WithMany()
                        .HasForeignKey("AwayBankType_GeneralLookUpID");

                    b.HasOne("ProductMatrix.Domain.Entities.GeneralLookUp", "EquityType_GeneralLookUp")
                        .WithMany()
                        .HasForeignKey("EquityType_GeneralLookUpID");

                    b.HasOne("ProductMatrix.Domain.Entities.GeneralLookUp", "UsageType_GeneralLookUp")
                        .WithMany()
                        .HasForeignKey("UsageType_GeneralLookUpID");

                    b.Navigation("ApplicationObjectiveClassification_CouncilZoningType");

                    b.Navigation("AwayBankType_GeneralLookUp");

                    b.Navigation("EquityType_GeneralLookUp");

                    b.Navigation("UsageType_GeneralLookUp");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.Calculator.AdditionalFee", b =>
                {
                    b.HasOne("ProductMatrix.Domain.Entities.Products.DocType", "AdditionalFee_DocType")
                        .WithMany()
                        .HasForeignKey("AdditionalFee_DocTypeID");

                    b.HasOne("ProductMatrix.Domain.Entities.Calculator.LandSize", "AdditionalFee_LandSize")
                        .WithMany()
                        .HasForeignKey("AdditionalFee_LandSizeID");

                    b.HasOne("ProductMatrix.Domain.Entities.Products.LoanToValueRatio", "AdditionalFee_LoanToValueRatio")
                        .WithMany()
                        .HasForeignKey("AdditionalFee_LoanToValueRatioID");

                    b.HasOne("ProductMatrix.Domain.Entities.Products.VacantLandCategory", "AdditionalFee_VacantLandCategory")
                        .WithMany()
                        .HasForeignKey("AdditionalFee_VacantLandCategoryID");

                    b.Navigation("AdditionalFee_DocType");

                    b.Navigation("AdditionalFee_LandSize");

                    b.Navigation("AdditionalFee_LoanToValueRatio");

                    b.Navigation("AdditionalFee_VacantLandCategory");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.Calculator.AdditionalFeeDocTypeVariation", b =>
                {
                    b.HasOne("ProductMatrix.Domain.Entities.Products.DocType", "AdditionalFeeDocTypeVariation_DocType")
                        .WithMany()
                        .HasForeignKey("AdditionalFeeDocTypeVariation_DocTypeID");

                    b.Navigation("AdditionalFeeDocTypeVariation_DocType");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.Calculator.DefaultFee", b =>
                {
                    b.HasOne("ProductMatrix.Domain.Entities.Products.DocType", "DefaultFee_DocType")
                        .WithMany()
                        .HasForeignKey("DefaultFee_DocTypeID");

                    b.HasOne("ProductMatrix.Domain.Entities.Products.LoanToValueRatio", "DefaultFee_LoanToValueRatio")
                        .WithMany()
                        .HasForeignKey("DefaultFee_LoanToValueRatioID");

                    b.HasOne("ProductMatrix.Domain.Entities.Products.Product", "DefaultFee_Product")
                        .WithMany()
                        .HasForeignKey("DefaultFee_ProductID");

                    b.Navigation("DefaultFee_DocType");

                    b.Navigation("DefaultFee_LoanToValueRatio");

                    b.Navigation("DefaultFee_Product");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.Calculator.ProductFeeLVRRate", b =>
                {
                    b.HasOne("ProductMatrix.Domain.Entities.Products.DocType", "ProductFeeLVRRate_DocType")
                        .WithMany()
                        .HasForeignKey("ProductFeeLVRRate_DocTypeID");

                    b.HasOne("ProductMatrix.Domain.Entities.Products.Product", "ProductFeeLVRRate_Product")
                        .WithMany()
                        .HasForeignKey("ProductFeeLVRRate_ProductID");

                    b.Navigation("ProductFeeLVRRate_DocType");

                    b.Navigation("ProductFeeLVRRate_Product");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.Calculator.ScenarioBuilder", b =>
                {
                    b.HasOne("ProductMatrix.Domain.Entities.Products.CouncilZoningCategory", "ScenarioBuilder_CouncilZoningCategory")
                        .WithMany()
                        .HasForeignKey("ScenarioBuilder_CouncilZoningCategoryID");

                    b.HasOne("ProductMatrix.Domain.Entities.Products.RelocationServicing", "ScenarioBuilder_RelocationServicing")
                        .WithMany()
                        .HasForeignKey("ScenarioBuilder_RelocationServicingID");

                    b.HasOne("ProductMatrix.Domain.Entities.Products.VacantLandCategory", "ScenarioBuilder_VacantLandCategory")
                        .WithMany()
                        .HasForeignKey("ScenarioBuilder_VacantLandCategoryID");

                    b.Navigation("ScenarioBuilder_CouncilZoningCategory");

                    b.Navigation("ScenarioBuilder_RelocationServicing");

                    b.Navigation("ScenarioBuilder_VacantLandCategory");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.EmploymentClassification", b =>
                {
                    b.HasOne("ProductMatrix.Domain.Entities.Products.CouncilZoningCategory", "EmploymentClassification_CouncilZoningCategory")
                        .WithMany()
                        .HasForeignKey("EmploymentClassification_CouncilZoningCategoryID");

                    b.Navigation("EmploymentClassification_CouncilZoningCategory");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.LandSizeClassification", b =>
                {
                    b.HasOne("ProductMatrix.Domain.Entities.Products.CouncilZoningCategory", "LandSizeClassification_CouncilZoningType")
                        .WithMany()
                        .HasForeignKey("LandSizeClassification_CouncilZoningTypeID");

                    b.Navigation("LandSizeClassification_CouncilZoningType");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.Postcodes.Postcode", b =>
                {
                    b.HasOne("ProductMatrix.Domain.Entities.Postcodes.State", "Postcode_State")
                        .WithMany("Postcodes")
                        .HasForeignKey("Postcode_StateID");

                    b.Navigation("Postcode_State");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.Postcodes.PostcodeClassificationMapper", b =>
                {
                    b.HasOne("ProductMatrix.Domain.Entities.Postcodes.PostcodeClassification", "PostcodeClassificationMapper_PostcodeClassification")
                        .WithMany()
                        .HasForeignKey("PostcodeClassificationMapper_PostcodeClassificationID");

                    b.HasOne("ProductMatrix.Domain.Entities.Postcodes.Postcode", "PostcodeClassificationMapper_Postcode")
                        .WithMany()
                        .HasForeignKey("PostcodeClassificationMapper_PostcodeID");

                    b.Navigation("PostcodeClassificationMapper_Postcode");

                    b.Navigation("PostcodeClassificationMapper_PostcodeClassification");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.Postcodes.PostcodeSpecificationMapper", b =>
                {
                    b.HasOne("ProductMatrix.Domain.Entities.Postcodes.PostcodeClassification", "PostcodeClassification_HighSecurity")
                        .WithMany()
                        .HasForeignKey("PostcodeClassification_HighSecurityID");

                    b.HasOne("ProductMatrix.Domain.Entities.Postcodes.PostcodeClassification", "PostcodeClassification_PCCategory")
                        .WithMany()
                        .HasForeignKey("PostcodeClassification_PCCategoryID");

                    b.HasOne("ProductMatrix.Domain.Entities.Postcodes.PostcodeClassification", "PostcodeClassification_SAndP")
                        .WithMany()
                        .HasForeignKey("PostcodeClassification_SAndPID");

                    b.Navigation("PostcodeClassification_HighSecurity");

                    b.Navigation("PostcodeClassification_PCCategory");

                    b.Navigation("PostcodeClassification_SAndP");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.Postcodes.PostcodeSuburbMapper", b =>
                {
                    b.HasOne("ProductMatrix.Domain.Entities.Postcodes.Postcode", "PostcodeSuburbMapper_Postcode")
                        .WithMany()
                        .HasForeignKey("PostcodeSuburbMapper_PostcodeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductMatrix.Domain.Entities.Postcodes.Suburb", "PostcodeSuburbMapper_Suburb")
                        .WithMany()
                        .HasForeignKey("PostcodeSuburbMapper_SuburbID");

                    b.Navigation("PostcodeSuburbMapper_Postcode");

                    b.Navigation("PostcodeSuburbMapper_Suburb");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.Postcodes.Suburb", b =>
                {
                    b.HasOne("ProductMatrix.Domain.Entities.Postcodes.State", "SuburbState")
                        .WithMany()
                        .HasForeignKey("SuburbStateID");

                    b.Navigation("SuburbState");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.ProductSelectors.AgeCreditReportProductSelector", b =>
                {
                    b.HasOne("ProductMatrix.Domain.Entities.Products.Product", "AgeCreditReportProductSelector_Product")
                        .WithMany()
                        .HasForeignKey("AgeCreditReportProductSelector_ProductID");

                    b.Navigation("AgeCreditReportProductSelector_Product");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.ProductSelectors.ApplicationObjectiveProductSelector", b =>
                {
                    b.HasOne("ProductMatrix.Domain.Entities.ApplicationObjectiveClassification", "ApplicationObjectiveProductSelector_ApplicationObjectiveClassification")
                        .WithMany()
                        .HasForeignKey("ApplicationObjectiveProductSelector_ApplicationObjectiveClassificationID");

                    b.HasOne("ProductMatrix.Domain.Entities.Products.Product", "ApplicationObjectiveProductSelector_Product")
                        .WithMany()
                        .HasForeignKey("ApplicationObjectiveProductSelector_ProductID");

                    b.Navigation("ApplicationObjectiveProductSelector_ApplicationObjectiveClassification");

                    b.Navigation("ApplicationObjectiveProductSelector_Product");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.ProductSelectors.BorrowingEntityProductSelector", b =>
                {
                    b.HasOne("ProductMatrix.Domain.Entities.Postcodes.BorrowingEntityType", "BorrowingEntityProductSelector_BorrowingEntityType")
                        .WithMany()
                        .HasForeignKey("BorrowingEntityProductSelector_BorrowingEntityTypeID");

                    b.HasOne("ProductMatrix.Domain.Entities.Products.CouncilZoningCategory", "BorrowingEntityProductSelector_CouncilZoningType")
                        .WithMany()
                        .HasForeignKey("BorrowingEntityProductSelector_CouncilZoningTypeID");

                    b.HasOne("ProductMatrix.Domain.Entities.Products.Product", "BorrowingEntityProductSelector_Product")
                        .WithMany()
                        .HasForeignKey("BorrowingEntityProductSelector_ProductID");

                    b.Navigation("BorrowingEntityProductSelector_BorrowingEntityType");

                    b.Navigation("BorrowingEntityProductSelector_CouncilZoningType");

                    b.Navigation("BorrowingEntityProductSelector_Product");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.ProductSelectors.ButtonTypeProductSelector", b =>
                {
                    b.HasOne("ProductMatrix.Domain.Entities.Products.CouncilZoningCategory", "ButtonTypeProductSelector_CouncilZoningType")
                        .WithMany()
                        .HasForeignKey("ButtonTypeProductSelector_CouncilZoningTypeID");

                    b.HasOne("ProductMatrix.Domain.Entities.GeneralLookUp", "ButtonTypeProductSelector_GeneralLookUp")
                        .WithMany()
                        .HasForeignKey("ButtonTypeProductSelector_GeneralLookUpID");

                    b.HasOne("ProductMatrix.Domain.Entities.Products.Product", "ButtonTypeProductSelector_Product")
                        .WithMany()
                        .HasForeignKey("ButtonTypeProductSelector_ProductID");

                    b.Navigation("ButtonTypeProductSelector_CouncilZoningType");

                    b.Navigation("ButtonTypeProductSelector_GeneralLookUp");

                    b.Navigation("ButtonTypeProductSelector_Product");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.ProductSelectors.CashOutProductSelector", b =>
                {
                    b.HasOne("ProductMatrix.Domain.Entities.BusinessFinanceType", "CashOutProductSelector_BusinessFinanceType")
                        .WithMany()
                        .HasForeignKey("CashOutProductSelector_BusinessFinanceTypeID");

                    b.HasOne("ProductMatrix.Domain.Entities.CashOutType", "CashOutProductSelector_CashOutType")
                        .WithMany()
                        .HasForeignKey("CashOutProductSelector_CashOutTypeID");

                    b.HasOne("ProductMatrix.Domain.Entities.Products.Product", "CashOutProductSelector_Product")
                        .WithMany()
                        .HasForeignKey("CashOutProductSelector_ProductID");

                    b.Navigation("CashOutProductSelector_BusinessFinanceType");

                    b.Navigation("CashOutProductSelector_CashOutType");

                    b.Navigation("CashOutProductSelector_Product");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.ProductSelectors.ConstructionProductSelector", b =>
                {
                    b.HasOne("ProductMatrix.Domain.BuilderType", "ConstructionProductSelector_BuilderType")
                        .WithMany()
                        .HasForeignKey("ConstructionProductSelector_BuilderTypeID");

                    b.HasOne("ProductMatrix.Domain.Entities.ConstructionType", "ConstructionProductSelector_ConstructionType")
                        .WithMany()
                        .HasForeignKey("ConstructionProductSelector_ConstructionTypeID");

                    b.HasOne("ProductMatrix.Domain.Entities.Products.CouncilZoningCategory", "ConstructionProductSelector_CouncilZoningType")
                        .WithMany()
                        .HasForeignKey("ConstructionProductSelector_CouncilZoningTypeID");

                    b.HasOne("ProductMatrix.Domain.Entities.Products.Product", "ConstructionProductSelector_Product")
                        .WithMany()
                        .HasForeignKey("ConstructionProductSelector_ProductID");

                    b.HasOne("ProductMatrix.Domain.Entities.RenovationType", "ConstructionProductSelector_RenovationType")
                        .WithMany()
                        .HasForeignKey("ConstructionProductSelector_RenovationTypeID");

                    b.Navigation("ConstructionProductSelector_BuilderType");

                    b.Navigation("ConstructionProductSelector_ConstructionType");

                    b.Navigation("ConstructionProductSelector_CouncilZoningType");

                    b.Navigation("ConstructionProductSelector_Product");

                    b.Navigation("ConstructionProductSelector_RenovationType");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.ProductSelectors.DocTypeProductSelector", b =>
                {
                    b.HasOne("ProductMatrix.Domain.Entities.Products.CouncilZoningCategory", "DocTypeProductSelector_CouncilZoningType")
                        .WithMany()
                        .HasForeignKey("DocTypeProductSelector_CouncilZoningTypeID");

                    b.HasOne("ProductMatrix.Domain.Entities.Products.DocType", "DocTypeProductSelector_DocType")
                        .WithMany()
                        .HasForeignKey("DocTypeProductSelector_DocTypeID");

                    b.HasOne("ProductMatrix.Domain.Entities.Products.Product", "DocTypeProductSelector_Product")
                        .WithMany()
                        .HasForeignKey("DocTypeProductSelector_ProductID");

                    b.Navigation("DocTypeProductSelector_CouncilZoningType");

                    b.Navigation("DocTypeProductSelector_DocType");

                    b.Navigation("DocTypeProductSelector_Product");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.ProductSelectors.DwellingsProductSelector", b =>
                {
                    b.HasOne("ProductMatrix.Domain.Entities.Products.CouncilZoningCategory", "DwellingsProductSelector_CouncilZoningCategoryType")
                        .WithMany()
                        .HasForeignKey("DwellingsProductSelector_CouncilZoningCategoryTypeID");

                    b.HasOne("ProductMatrix.Domain.Entities.Products.Product", "DwellingsProductSelector_Product")
                        .WithMany()
                        .HasForeignKey("DwellingsProductSelector_ProductID");

                    b.Navigation("DwellingsProductSelector_CouncilZoningCategoryType");

                    b.Navigation("DwellingsProductSelector_Product");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.ProductSelectors.EmployerClassificationProductSelector", b =>
                {
                    b.HasOne("ProductMatrix.Domain.Entities.Products.Product", "EmployerClassificationProductSelector_Product")
                        .WithMany()
                        .HasForeignKey("EmployerClassificationProductSelector_ProductID");

                    b.Navigation("EmployerClassificationProductSelector_Product");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.ProductSelectors.EmploymentClassificationProductSelector", b =>
                {
                    b.HasOne("ProductMatrix.Domain.Entities.EmploymentClassification", "EmploymentClassificationProductSelector_EmploymentClassification")
                        .WithMany("EmploymentClassificationProductSelectors")
                        .HasForeignKey("EmploymentClassificationProductSelector_EmploymentClassificationID");

                    b.HasOne("ProductMatrix.Domain.Entities.Products.Product", "EmploymentClassificationProductSelector_Product")
                        .WithMany()
                        .HasForeignKey("EmploymentClassificationProductSelector_ProductID");

                    b.Navigation("EmploymentClassificationProductSelector_EmploymentClassification");

                    b.Navigation("EmploymentClassificationProductSelector_Product");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.ProductSelectors.FacilityTypeProductSelector", b =>
                {
                    b.HasOne("ProductMatrix.Domain.Entities.Products.CouncilZoningCategory", "FacilityTypeProductSelector_CouncilZoningType")
                        .WithMany()
                        .HasForeignKey("FacilityTypeProductSelector_CouncilZoningTypeID");

                    b.HasOne("ProductMatrix.Domain.Entities.GeneralLookUp", "FacilityTypeProductSelector_GeneralLookUp")
                        .WithMany()
                        .HasForeignKey("FacilityTypeProductSelector_GeneralLookUpID");

                    b.HasOne("ProductMatrix.Domain.Entities.Products.Product", "FacilityTypeProductSelector_Product")
                        .WithMany()
                        .HasForeignKey("FacilityTypeProductSelector_ProductID");

                    b.Navigation("FacilityTypeProductSelector_CouncilZoningType");

                    b.Navigation("FacilityTypeProductSelector_GeneralLookUp");

                    b.Navigation("FacilityTypeProductSelector_Product");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.ProductSelectors.GuidedByTypeProductSelector", b =>
                {
                    b.HasOne("ProductMatrix.Domain.Entities.Products.CouncilZoningCategory", "GuidedByTypeProductSelector_CouncilZoningType")
                        .WithMany()
                        .HasForeignKey("GuidedByTypeProductSelector_CouncilZoningTypeID");

                    b.HasOne("ProductMatrix.Domain.Entities.GeneralLookUp", "GuidedByTypeProductSelector_GeneralLookUp")
                        .WithMany()
                        .HasForeignKey("GuidedByTypeProductSelector_GeneralLookUpID");

                    b.HasOne("ProductMatrix.Domain.Entities.Products.Product", "GuidedByTypeProductSelector_Product")
                        .WithMany()
                        .HasForeignKey("GuidedByTypeProductSelector_ProductID");

                    b.Navigation("GuidedByTypeProductSelector_CouncilZoningType");

                    b.Navigation("GuidedByTypeProductSelector_GeneralLookUp");

                    b.Navigation("GuidedByTypeProductSelector_Product");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.ProductSelectors.HeedFullPointTypeProductSelector", b =>
                {
                    b.HasOne("ProductMatrix.Domain.Entities.Products.CouncilZoningCategory", "HeedFullPointTypeProductSelector_CouncilZoningType")
                        .WithMany()
                        .HasForeignKey("HeedFullPointTypeProductSelector_CouncilZoningTypeID");

                    b.HasOne("ProductMatrix.Domain.Entities.GeneralLookUp", "HeedFullPointTypeProductSelector_GeneralLookUp")
                        .WithMany()
                        .HasForeignKey("HeedFullPointTypeProductSelector_GeneralLookUpID");

                    b.HasOne("ProductMatrix.Domain.Entities.Products.Product", "HeedFullPointTypeProductSelector_Product")
                        .WithMany()
                        .HasForeignKey("HeedFullPointTypeProductSelector_ProductID");

                    b.Navigation("HeedFullPointTypeProductSelector_CouncilZoningType");

                    b.Navigation("HeedFullPointTypeProductSelector_GeneralLookUp");

                    b.Navigation("HeedFullPointTypeProductSelector_Product");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.ProductSelectors.LandSizeProductSelector", b =>
                {
                    b.HasOne("ProductMatrix.Domain.Entities.LandSizeClassification", "LandSizeProductSelector_LandSizeClassification")
                        .WithMany()
                        .HasForeignKey("LandSizeProductSelector_LandSizeClassificationID");

                    b.HasOne("ProductMatrix.Domain.Entities.Products.Product", "LandSizeProductSelector_Product")
                        .WithMany()
                        .HasForeignKey("LandSizeProductSelector_ProductID");

                    b.Navigation("LandSizeProductSelector_LandSizeClassification");

                    b.Navigation("LandSizeProductSelector_Product");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.ProductSelectors.LoanAmountProductSelector", b =>
                {
                    b.HasOne("ProductMatrix.Domain.Entities.Products.CouncilZoningCategory", "LoanAmountProductSelector_CouncilZoningType")
                        .WithMany()
                        .HasForeignKey("LoanAmountProductSelector_CouncilZoningTypeID");

                    b.HasOne("ProductMatrix.Domain.Entities.Products.DocType", "LoanAmountProductSelector_DocType")
                        .WithMany()
                        .HasForeignKey("LoanAmountProductSelector_DocTypeID");

                    b.HasOne("ProductMatrix.Domain.Entities.Products.Product", "LoanAmountProductSelector_Product")
                        .WithMany()
                        .HasForeignKey("LoanAmountProductSelector_ProductID");

                    b.Navigation("LoanAmountProductSelector_CouncilZoningType");

                    b.Navigation("LoanAmountProductSelector_DocType");

                    b.Navigation("LoanAmountProductSelector_Product");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.ProductSelectors.LvrProductSelector", b =>
                {
                    b.HasOne("ProductMatrix.Domain.Entities.Products.Product", "LvrProductSelector_Product")
                        .WithMany()
                        .HasForeignKey("LvrProductSelector_ProductID");

                    b.Navigation("LvrProductSelector_Product");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.ProductSelectors.MaritalStatusProductSelector", b =>
                {
                    b.HasOne("ProductMatrix.Domain.Entities.Products.CouncilZoningCategory", "MaritalStatusProductSelector_CouncilZoningCategoryType")
                        .WithMany()
                        .HasForeignKey("MaritalStatusProductSelector_CouncilZoningCategoryTypeID");

                    b.HasOne("ProductMatrix.Domain.Entities.Products.Product", "MaritalStatusProductSelector_Product")
                        .WithMany()
                        .HasForeignKey("MaritalStatusProductSelector_ProductID");

                    b.Navigation("MaritalStatusProductSelector_CouncilZoningCategoryType");

                    b.Navigation("MaritalStatusProductSelector_Product");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.ProductSelectors.NaturalPersonAgeProductSelector", b =>
                {
                    b.HasOne("ProductMatrix.Domain.Entities.Products.CouncilZoningCategory", "NaturalPersonAgeProductSelector_CouncilZoningType")
                        .WithMany()
                        .HasForeignKey("NaturalPersonAgeProductSelector_CouncilZoningTypeID");

                    b.HasOne("ProductMatrix.Domain.Entities.Products.Product", "NaturalPersonAgeProductSelector_Product")
                        .WithMany()
                        .HasForeignKey("NaturalPersonAgeProductSelector_ProductID");

                    b.Navigation("NaturalPersonAgeProductSelector_CouncilZoningType");

                    b.Navigation("NaturalPersonAgeProductSelector_Product");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.ProductSelectors.OtherIncomeTypeProductSelector", b =>
                {
                    b.HasOne("ProductMatrix.Domain.Entities.Products.CouncilZoningCategory", "OtherIncomeTypeProductSelector_CouncilZoningCategoryType")
                        .WithMany()
                        .HasForeignKey("OtherIncomeTypeProductSelector_CouncilZoningCategoryTypeID");

                    b.HasOne("ProductMatrix.Domain.Entities.OtherIncomeType", "OtherIncomeTypeProductSelector_OtherIncomeType")
                        .WithMany()
                        .HasForeignKey("OtherIncomeTypeProductSelector_OtherIncomeTypeID");

                    b.HasOne("ProductMatrix.Domain.Entities.Products.Product", "OtherIncomeTypeProductSelector_Product")
                        .WithMany()
                        .HasForeignKey("OtherIncomeTypeProductSelector_ProductID");

                    b.Navigation("OtherIncomeTypeProductSelector_CouncilZoningCategoryType");

                    b.Navigation("OtherIncomeTypeProductSelector_OtherIncomeType");

                    b.Navigation("OtherIncomeTypeProductSelector_Product");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.ProductSelectors.PostcodeProductSelector", b =>
                {
                    b.HasOne("ProductMatrix.Domain.Entities.Postcodes.PostcodeSpecificationMapper", "PostcodeProductSelector_PostcodeSpecificationMapper")
                        .WithMany()
                        .HasForeignKey("PostcodeProductSelector_PostcodeSpecificationMapperID");

                    b.HasOne("ProductMatrix.Domain.Entities.Products.Product", "PostcodeProductSelector_Product")
                        .WithMany()
                        .HasForeignKey("PostcodeProductSelector_ProductID");

                    b.Navigation("PostcodeProductSelector_PostcodeSpecificationMapper");

                    b.Navigation("PostcodeProductSelector_Product");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.ProductSelectors.PotentialImpactfulConsiderationProductSelector", b =>
                {
                    b.HasOne("ProductMatrix.Domain.Entities.Products.Product", "PotentialImpactfulConsiderationProductSelector_Product")
                        .WithMany()
                        .HasForeignKey("PotentialImpactfulConsiderationProductSelector_ProductID");

                    b.Navigation("PotentialImpactfulConsiderationProductSelector_Product");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.ProductSelectors.PurchaseTypeProductSelector", b =>
                {
                    b.HasOne("ProductMatrix.Domain.Entities.Products.CouncilZoningCategory", "PurchaseTypeProductSelector_CouncilZoningType")
                        .WithMany()
                        .HasForeignKey("PurchaseTypeProductSelector_CouncilZoningTypeID");

                    b.HasOne("ProductMatrix.Domain.Entities.Products.DocType", "PurchaseTypeProductSelector_DocType")
                        .WithMany()
                        .HasForeignKey("PurchaseTypeProductSelector_DocTypeID");

                    b.HasOne("ProductMatrix.Domain.Entities.Products.Product", "PurchaseTypeProductSelector_Product")
                        .WithMany()
                        .HasForeignKey("PurchaseTypeProductSelector_ProductID");

                    b.Navigation("PurchaseTypeProductSelector_CouncilZoningType");

                    b.Navigation("PurchaseTypeProductSelector_DocType");

                    b.Navigation("PurchaseTypeProductSelector_Product");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.ProductSelectors.RepaymentTypeProductSelector", b =>
                {
                    b.HasOne("ProductMatrix.Domain.Entities.Products.CouncilZoningCategory", "RepaymentTypeProductSelector_CouncilZoningType")
                        .WithMany()
                        .HasForeignKey("RepaymentTypeProductSelector_CouncilZoningTypeID");

                    b.HasOne("ProductMatrix.Domain.Entities.Products.Product", "RepaymentTypeProductSelector_Product")
                        .WithMany()
                        .HasForeignKey("RepaymentTypeProductSelector_ProductID");

                    b.Navigation("RepaymentTypeProductSelector_CouncilZoningType");

                    b.Navigation("RepaymentTypeProductSelector_Product");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.ProductSelectors.SecurityTypeProductSelector", b =>
                {
                    b.HasOne("ProductMatrix.Domain.Entities.Products.CouncilZoningCategory", "SecurityTypeProductSelector_CouncilZoningType")
                        .WithMany()
                        .HasForeignKey("SecurityTypeProductSelector_CouncilZoningTypeID");

                    b.HasOne("ProductMatrix.Domain.Entities.GeneralLookUp", "SecurityTypeProductSelector_GeneralLookUp")
                        .WithMany()
                        .HasForeignKey("SecurityTypeProductSelector_GeneralLookUpID");

                    b.HasOne("ProductMatrix.Domain.Entities.Products.Product", "SecurityTypeProductSelector_Product")
                        .WithMany()
                        .HasForeignKey("SecurityTypeProductSelector_ProductID");

                    b.Navigation("SecurityTypeProductSelector_CouncilZoningType");

                    b.Navigation("SecurityTypeProductSelector_GeneralLookUp");

                    b.Navigation("SecurityTypeProductSelector_Product");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.ProductSelectors.SelfEmployedClassificationProductSelector", b =>
                {
                    b.HasOne("ProductMatrix.Domain.Entities.Products.Product", "SelfEmployedClassificationProductSelector_Product")
                        .WithMany()
                        .HasForeignKey("SelfEmployedClassificationProductSelector_ProductID");

                    b.HasOne("ProductMatrix.Domain.Entities.SelfEmployedClassification", "SelfEmployedClassificationProductSelector_SelfEmployedClassification")
                        .WithMany("SelfEmployedClassificationProductSelectors")
                        .HasForeignKey("SelfEmployedClassificationProductSelector_SelfEmployedClassificationID");

                    b.Navigation("SelfEmployedClassificationProductSelector_Product");

                    b.Navigation("SelfEmployedClassificationProductSelector_SelfEmployedClassification");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.ProductSelectors.ServiceTypeProductSelector", b =>
                {
                    b.HasOne("ProductMatrix.Domain.Entities.Products.CouncilZoningCategory", "ServiceTypeProductSelector_CouncilZoningType")
                        .WithMany()
                        .HasForeignKey("ServiceTypeProductSelector_CouncilZoningTypeID");

                    b.HasOne("ProductMatrix.Domain.Entities.GeneralLookUp", "ServiceTypeProductSelector_GeneralLookUp")
                        .WithMany()
                        .HasForeignKey("ServiceTypeProductSelector_GeneralLookUpID");

                    b.HasOne("ProductMatrix.Domain.Entities.Products.Product", "ServiceTypeProductSelector_Product")
                        .WithMany()
                        .HasForeignKey("ServiceTypeProductSelector_ProductID");

                    b.Navigation("ServiceTypeProductSelector_CouncilZoningType");

                    b.Navigation("ServiceTypeProductSelector_GeneralLookUp");

                    b.Navigation("ServiceTypeProductSelector_Product");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.ProductSelectors.TitleTypeProductSelector", b =>
                {
                    b.HasOne("ProductMatrix.Domain.Entities.Products.CouncilZoningCategory", "TitleTypeProductSelector_CouncilZoningType")
                        .WithMany()
                        .HasForeignKey("TitleTypeProductSelector_CouncilZoningTypeID");

                    b.HasOne("ProductMatrix.Domain.Entities.GeneralLookUp", "TitleTypeProductSelector_GeneralLookUp")
                        .WithMany()
                        .HasForeignKey("TitleTypeProductSelector_GeneralLookUpID");

                    b.HasOne("ProductMatrix.Domain.Entities.Products.Product", "TitleTypeProductSelector_Product")
                        .WithMany()
                        .HasForeignKey("TitleTypeProductSelector_ProductID");

                    b.Navigation("TitleTypeProductSelector_CouncilZoningType");

                    b.Navigation("TitleTypeProductSelector_GeneralLookUp");

                    b.Navigation("TitleTypeProductSelector_Product");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.ProductSelectors.UnitsApartmentProductSelector", b =>
                {
                    b.HasOne("ProductMatrix.Domain.Entities.Products.Product", "UnitsApartmentProductSelector_Product")
                        .WithMany()
                        .HasForeignKey("UnitsApartmentProductSelector_ProductID");

                    b.Navigation("UnitsApartmentProductSelector_Product");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.ProductSelectors.UsageTypeProductSelector", b =>
                {
                    b.HasOne("ProductMatrix.Domain.Entities.Products.CouncilZoningCategory", "UsageTypeProductSelector_CouncilZoningType")
                        .WithMany()
                        .HasForeignKey("UsageTypeProductSelector_CouncilZoningTypeID");

                    b.HasOne("ProductMatrix.Domain.Entities.GeneralLookUp", "UsageTypeProductSelector_GeneralLookUp")
                        .WithMany()
                        .HasForeignKey("UsageTypeProductSelector_GeneralLookUpID");

                    b.HasOne("ProductMatrix.Domain.Entities.Products.Product", "UsageTypeProductSelector_Product")
                        .WithMany()
                        .HasForeignKey("UsageTypeProductSelector_ProductID");

                    b.Navigation("UsageTypeProductSelector_CouncilZoningType");

                    b.Navigation("UsageTypeProductSelector_GeneralLookUp");

                    b.Navigation("UsageTypeProductSelector_Product");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.ProductSelectors.ZoningTypeProductSelector", b =>
                {
                    b.HasOne("ProductMatrix.Domain.Entities.Products.CouncilZoningCategory", "ZoningTypeProductSelector_CouncilZoningCategory")
                        .WithMany()
                        .HasForeignKey("ZoningTypeProductSelector_CouncilZoningCategoryID");

                    b.HasOne("ProductMatrix.Domain.Entities.Products.CouncilZoningCategory", "ZoningTypeProductSelector_CouncilZoningType")
                        .WithMany()
                        .HasForeignKey("ZoningTypeProductSelector_CouncilZoningTypeID");

                    b.HasOne("ProductMatrix.Domain.Entities.Products.Product", "ZoningTypeProductSelector_Product")
                        .WithMany()
                        .HasForeignKey("ZoningTypeProductSelector_ProductID");

                    b.HasOne("ProductMatrix.Domain.Entities.Postcodes.State", "ZoningTypeProductSelector_State")
                        .WithMany()
                        .HasForeignKey("ZoningTypeProductSelector_StateID");

                    b.Navigation("ZoningTypeProductSelector_CouncilZoningCategory");

                    b.Navigation("ZoningTypeProductSelector_CouncilZoningType");

                    b.Navigation("ZoningTypeProductSelector_Product");

                    b.Navigation("ZoningTypeProductSelector_State");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.Products.Product", b =>
                {
                    b.HasOne("ProductMatrix.Domain.Entities.Products.ProductCategory", "Product_ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("Product_ProductCategoryID");

                    b.Navigation("Product_ProductCategory");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.RulesFilter", b =>
                {
                    b.HasOne("ProductMatrix.Domain.Entities.GeneralLookUp", "FilterType_GeneralLookUp")
                        .WithMany()
                        .HasForeignKey("FilterType_GeneralLookUpID");

                    b.HasOne("ProductMatrix.Domain.Entities.Products.CouncilZoningCategory", "RulesFilter_CouncilZoningType")
                        .WithMany()
                        .HasForeignKey("RulesFilter_CouncilZoningTypeID");

                    b.Navigation("FilterType_GeneralLookUp");

                    b.Navigation("RulesFilter_CouncilZoningType");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.EmploymentClassification", b =>
                {
                    b.Navigation("EmploymentClassificationProductSelectors");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.Postcodes.State", b =>
                {
                    b.Navigation("Postcodes");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.Products.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ProductMatrix.Domain.Entities.SelfEmployedClassification", b =>
                {
                    b.Navigation("SelfEmployedClassificationProductSelectors");
                });
#pragma warning restore 612, 618
        }
    }
}
